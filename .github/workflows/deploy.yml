# IMPORTANT: The following Github Secrets must be provided
# TF_API_KEY: API token obtained from Terraform Cloud
# AWS_EC2_PUBLIC_KEY: public ssh key component for connecting to remote server
# AWS_EC2_PRIVATE_KEY: private ssh key component stored on remote server
# DATABASE_PASSWORD: Password to the RDS MySQL instance
# FLASK_SECRET_KEY: Flask web-app specific secret key.

name: Deploy

on:
  push:
    branches:
      - master

jobs:
  terraform-setup:
    name: "Terraform Setup"
    runs-on: ubuntu-latest
    outputs:
      ip: ${{ steps.get-ip.outputs.stdout }}
    steps:
      - uses: actions/checkout@v2

      - name: Terraform Config
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_KEY }}
          terraform_version: 0.13.2

      - name: Terraform Init
        run: terraform init

      - name: Setup Variable File (HACKY)
        env:
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          AWS_EC2_PUBLIC_KEY: ${{ secrets.AWS_EC2_PUBLIC_KEY }}
        shell: bash
        run: |
          cat >> github.auto.tfvars <<-EOF
          github_ssh_key = "$AWS_EC2_PUBLIC_KEY"
          database_password = "$DATABASE_PASSWORD"
          EOF

      - name: Terraform Apply
        run: terraform apply -auto-approve

      # We run this wait step in order to make sure that the cloud-init
      # process can finish. It also adds a bit of time to panic-cancel
      # a deploy if you notice something wrong.
      - name: Wait for Server Initialization
        shell: bash
        run: echo "Sleeping for one minute..." && sleep 60

      - name: Get Server IP
        id: get-ip
        run: terraform output public_ip

  deploy-build:
    name: Deploy to AWS
    needs: terraform-setup
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js v14.x
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"

      - name: Install Dependencies
        run: |
          npm install -g yarn
          yarn install --frozen-lockfile

      - name: Build Task
        run: yarn build

      - name: Create Build Artifact
        env:
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
        run: |
          cat >> api/env_config.py <<-EOF
          MYSQL_DATABASE_PASSWORD = '$DATABASE_PASSWORD'
          SECRET_KEY = '$FLASK_SECRET_KEY'
          EOF
          mkdir -p dist
          cp -r api/ build/ Pipfile Pipfile.lock dist/

      # This step is necessary due to a potential bug with Terraform Github actions
      # where a newline is added to outputs.
      - name: Set REMOTE_HOST environement variable
        run: echo "REMOTE_HOST=${{ needs.terraform-setup.outputs.ip }}" >> $GITHUB_ENV

      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          SOURCE: "dist/"
          TARGET: "/home/ubuntu/dist"
          REMOTE_USER: "ubuntu"
